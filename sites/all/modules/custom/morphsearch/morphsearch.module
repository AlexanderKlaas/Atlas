<?php
/**
 * Implements hook_block_info(). Declares that the 'morphsearch-block' is provided by this module.
 *
 * @return array Each component of the which is an array of block information.
 *               The array keys are the 'delta' values used in other block hooks.
 */
function morphsearch_block_info() {
  $blocks['morphsearch-block'] = array(
    'info' => t('Morphsearch Block'),
    'cache' => DRUPAL_CACHE_GLOBAL, // The block is the same for every user on every page where it is visible.
    'status' => TRUE,
    'region' => 'sidebar_second',
  );

  return $blocks;
}


/**
 * Implements hook_block_view(). Generates the content of the 'morphsearch-block' block.
 *
 * @param string $delta : Which block to render. This is a unique identifier for the block within the module,
 *                        defined in hook_block_info().
 * @return array  Either an empty array so the block will not be shown or an array containing the following elements:
 *              subject: The default localized title of the block. If the block does not have a default title,
 *                       this should be set to NULL.
 *              content: The content of the block's body. This may be a renderable array (preferable) or a string
 *                       containing rendered HTML content. If the content is empty the block will not be shown.
 */
function morphsearch_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'morphsearch-block':
      //drupal_add_js(drupal_get_path('module', 'morphsearch') . "/js/morphsearch.js", array('scope' => 'footer'));

      //$block['subject'] = t('Morphsearch Block');
      $block['content'] = createMorphsearchContent();

      // Attach morphsearch CSS to block.
      $block['content']['#attached']['css']  = array(drupal_get_path('module', 'morphsearch') . "/css/morphsearch.css");
      $block['content']['#attached']['js'][] = array(
        'data' => drupal_get_path('module', 'morphsearch') . "/js/morphsearch.js",
        'scope' => 'footer',
      );

      break;
  }
  return $block;
}


/**
 * Generate block content (fulltext search, morphological search, typographic search, submit, ...).
 *
 * @return array Renderable array containing the block's body.
 */
function createMorphsearchContent() {
  // taxonomy SQL table/field info https://atlas-indeko.slack.com/archives/development/p1474617733000003
  // DB queries als Referenz/Vergleich z.B. auch in den anderen custom Modulen von Julien (interestedGroups.module, ...)

  $content = array();

  $content = array(
    // create elements using form API
    'fulltextsearch' => array(
      '#type' => 'textfield',
      '#title' => t('Portalsuche'),
      '#attributes' => array(
        'class' => array('morphsearch-fulltext'),
        'id' => 'fulltextsearch',
        'style' => 'width: 100%;',
      )
    ),
    'typesearch' => array('#type' => 'select',
      '#title' => t('Inhaltstypensuche (noch nicht in Suche aufgenommen):'),
      '#options' => node_type_get_names(), // drupal function, returns all content type names
      '#attributes' => array(
        'class' => array('morphsearch-type'),
        'id' => 'typesearch',
        'style' => 'width: 100%;',
      )
    ),
    // and pure html output
    'morphsearch' => array(
      '#markup' => buildSearchHtml(),
      '#suffix' => '',
    ),

    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Suche'),
      '#name' => 'searchbutton',
    ),

    'reset' => array(
      '#markup' => "<button id='morphsearch-reset'>Reset</button>",
    ),
  );

  buildSearchHtml();
  return $content;
}

/**
 * Creates the HTML for the dynamic search block.
 */
function buildSearchHtml() {

  $query = "SELECT taxonomy_vocabulary.name AS vocabulary_name, taxonomy_vocabulary.machine_name AS vocabulary_machinename,
              taxonomy_vocabulary.vid AS vocabulary_vid, taxonomy_term_data.name AS term_name, taxonomy_term_data.vid AS term_vid,
              taxonomy_term_data.tid AS tid, taxonomy_vocabulary.weight AS vocabulary_weight, taxonomy_term_data.weight AS term_weight 
            FROM {taxonomy_term_data} taxonomy_term_data
            LEFT JOIN {taxonomy_vocabulary} taxonomy_vocabulary ON taxonomy_term_data.vid = taxonomy_vocabulary.vid
            WHERE taxonomy_vocabulary.machine_name LIKE 'tax_morph_%'
            ORDER BY vocabulary_name ASC, term_weight ASC;";
  $result = db_query($query);

  $html = '';

  $currentLabel = '';
  foreach ($result as $row) {

    // new morphological item, add new label and select
    if ($currentLabel !== $row->vocabulary_name) {
      if ($currentLabel !== '') {
        $html .= "</select>";
      }

      $html .= "<label>$row->vocabulary_name</label>";

      // Check for multivalued morphological item
      if (strpos($row->vocabulary_machinename, 'tax_morph_m_') === false) { // singleselect
        $html .= "<select class='morphsearch-select'>";
      } else { // multiselect
        $html .= "<select multiple='multiple' class='morphsearch-select' size='1'>";
      }

      $html .= "<option value=''></option>";



      $currentLabel = $row->vocabulary_name;
    }

    $html .= "<option value='$row->tid'>$row->term_name</option>";
  }

  return $html;
}
