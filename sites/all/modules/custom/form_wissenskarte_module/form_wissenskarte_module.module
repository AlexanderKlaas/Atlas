<?php

/**
 * Implements hook_preprocess_HOOK.
 * Adds necessary js and css to edit / clone content type "Wissenskarte" pages.
 *
 * @param $vars: The variables array (modify in place).
 */
function form_wissenskarte_module_preprocess_page(&$vars)
{
  if (isset($vars['node']) && $vars['node']->type == 'wissenskarte') {
    drupal_add_js(drupal_get_path('module', 'form_wissenskarte_module') . "/js/imgmap.js", array('scope' => 'footer', 'weight' => 4));
    drupal_add_js(drupal_get_path('module', 'form_wissenskarte_module') . "/js/morphmapping.js", array('scope' => 'footer', 'weight' => 5));
    drupal_add_js(drupal_get_path('module', 'form_wissenskarte_module') . "/js/jquery.qtip.min.js", array('scope' => 'footer'));
    drupal_add_css(drupal_get_path('module', 'form_wissenskarte_module') . "/css/morphmapping.css");
    drupal_add_css(drupal_get_path('module', 'form_wissenskarte_module') . "/css/jquery.qtip.css");

    $pathEdit = 'node/*/edit';
    $pathClone = 'node/*/clone/confirm';
    $isPathEdit = drupal_match_path(current_path(), $pathEdit);
    $isPathClone = drupal_match_path(current_path(), $pathClone);

    // add for knowledge map edit and clone modes
    if ($isPathEdit || $isPathClone) {
      drupal_add_js(drupal_get_path('module', 'form_wissenskarte_module') . "/js/morphmapping_edit.js", array('scope' => 'footer', 'weight' => 6));
      drupal_add_js(drupal_get_path('module', 'form_wissenskarte_module') . "/js/lang_de.js", array('scope' => 'footer', 'weight' => 1));
    } else { // add for for knowledge map view mode
      drupal_add_js(drupal_get_path('module', 'form_wissenskarte_module') . "/js/morphmapping_view.js", array('scope' => 'footer', 'weight' => 6));
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter.
 *  Adds necessary js and css to add content type "Wissenskarte" pages.
 *
 * @param $element:    The field widget form element as constructed by hook_field_widget_form().
 * @param $form_state: An associative array containing the current state of the form.
 * @param $context:    An associative array containing the following key-value pairs, matching the arguments received by
 */
function form_wissenskarte_module_field_widget_image_image_form_alter(&$element, &$form_state, $context)
{
  // load only for type = "wissenskarte"
  $pathAddWissenskarte = 'node/add/wissenskarte';
  $isPathAddWissenskarte = drupal_match_path(current_path(), $pathAddWissenskarte);

  if ($isPathAddWissenskarte) {
    drupal_add_js(drupal_get_path('module', 'form_wissenskarte_module') . "/js/imgmap.js", array('scope' => 'footer', 'weight' => 4));
    drupal_add_js(drupal_get_path('module', 'form_wissenskarte_module') . "/js/morphmapping.js", array('scope' => 'footer', 'weight' => 5));
    drupal_add_js(drupal_get_path('module', 'form_wissenskarte_module') . "/js/morphmapping_add.js", array('scope' => 'footer', 'weight' => 5));
    drupal_add_js(drupal_get_path('module', 'form_wissenskarte_module') . "/js/lang_de.js", array('scope' => 'footer', 'weight' => 1));

    drupal_add_css(drupal_get_path('module', 'form_wissenskarte_module') . "/css/morphmapping.css");
  }
}

/**
 * Implements hook_node_view_alter().
 * Adds an html element (to be used as a "button") to knowledge maps to show / hide image map areas
 * if the jq_maphilight module is installed. [ID 103]
 *
 * @param $build: A renderable array representing the node content.
 */
function form_wissenskarte_module_node_view_alter(&$build) {
  if(module_exists('jq_maphilight')) {

    if ($build['#node']->type === 'wissenskarte' && $build['#view_mode'] === 'full') {

      // Set "button" text that can be accessed in js and translated in Drupal.
      $stringAreaShow = t("Show areas");
      $stringAreaHide = t("Hide areas");

      // can be accessed in js through Drupal.setting.form_wissenskarte_module
      drupal_add_js(array(
        'form_wissenskarte_module' => array(
          'stringAreaShow' => $stringAreaShow,
          'stringAreaHide' => $stringAreaHide,
        )
      ), array('type' => 'setting', 'scope' => 'footer', 'weight' => 99));


      $build['#node']->content['button_highlight'] = array(
        '#markup' => '<div><span id="button_hightlight" class="areashow">' . $stringAreaShow . '</span></div>',
        '#weight' => 0,
      );
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 * Strips all tags from "field_markierte_bereiche" which contains the html code representation of the created knowledgemap
 * (e.g. to prevent javascript injection).
 *
 * @param $node The node that is being inserted or updated.
 */
function form_wissenskarte_module_node_presave($node) {

  // Strip all tags except those relevant to knowledge maps: "map" and "area".
  if ($node->type === 'wissenskarte') {
    $knowledgemap_html = $node->field_markierte_bereiche['und']['0']['value'];
    $node->field_markierte_bereiche['und']['0']['value'] = strip_tags($knowledgemap_html,'<map><area>');
  }
}
