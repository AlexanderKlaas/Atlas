<?php

/**
 * Implements hook
 * Adds necessary css for form of content type publication.
 */
function publication_form_form_alter(&$form, &$form_state, $form_id) {

    if (isset($form['#form_id']) && $form['#form_id'] === 'biblio_node_form') {

        $form['#after_build'][] = 'publication_form_after_build';
        drupal_add_css(drupal_get_path('module', 'publication_form') . "/css/publication_form.css");
    }
}
// https://www.appnovation.com/blog/drupal-tip-using-formafter-build
function publication_form_after_build($form, &$form_state) {

    drupal_add_css(drupal_get_path('module', 'publication_form') . "/css/publication_form.css");
    return $form;
}

/**
 * Implements hook_node_validate().
 *
 * $node: The node being validated.
 * $form: The form being used to edit the node.
 * $form_state: The form state array.
 */
function publication_form_node_validate($node, $form, &$form_state) {
    if(module_exists('biblio_bibtex')) {
        if ($form['#form_id'] === 'biblio_node_form') {

            $year = array_key_exists('biblio_year', $form_state['values']) ? $form_state['values']['biblio_year'] : null;

            validateYear($year);


            $authors = array_key_exists('biblio_contributors', $form_state['values']) ? $form_state['values']['biblio_contributors'] : null;

            validateAuthors($authors);

        }
    }
}

function validateAuthors($authors) {

    if(!isset($authors)) { return; }

    $hasValue = FALSE;
    foreach ($authors as $author) {
        if (!empty($author['name'])) {
            $hasValue = TRUE;
        }
    }
    if (!$hasValue) {
        form_set_error('biblio_contributors', t('You must enter at least one author.'));
    }
}

function validateYear($year) {

    if (!isset($year)) { return; }

    if (!is_numeric($year)) {
        form_set_error('biblio_year', t('You have added an invalid date. Enter a year.'));
    } elseif ($year < '1800' ||  $year > '2200') {
        form_set_error('biblio_year', t('You have added an invalid date. Enter a year between 1800 and 2200.'));
    }

}

/**
 * Implements hook_help().
 * Display help link to README.txt in module overview (admin/modules).
 */
function publication_form_help($path, $arg) {
  switch ($path) {
    case 'admin/help#publication_form':
      $readme = file_get_contents(drupal_get_path('module', 'publication_form') . '/README.txt');
      return module_exists('markdown') ? filter_xss_admin(module_invoke('markdown', 'filter', 'process', 0, -1, $readme)) : '<pre>' . check_plain($readme) . '</pre>';
  }
}

